---
title: "STATS115_preliminary_analysis"
author: "Seiya Uno"
format: pdf
editor: visual
---

## Preliminary Analysis
```{r setup, include=FALSE}
knitr::opts_chunk$set(dev = 'pdf')
```

``` {r echo=FALSE, message=FALSE}
library(bayesrules)
library(tidyverse)
library(rstanarm)
library(bayesplot)
library(tidybayes)
library(broom.mixed)
library(forcats)
library(dplyr)
library(Hmisc)
library(corrplot)

RANDOM_STATE = 84735
```

```{r}
df <- read.csv("./data/binary_diabetes.csv")
sample_n(df, 3)
nrow(df)
```

```{r}
df_orig <- df
cols <- c("Diabetes_binary","HighBP","HighChol","CholCheck","Smoker","Stroke","HeartDiseaseorAttack","PhysActivity","Fruits","Veggies","HvyAlcoholConsump","AnyHealthcare","NoDocbcCost","DiffWalk","Sex")
df[cols] <- lapply(df[cols], factor) 
```


```{r}
ggplot(df, aes(x=Diabetes_binary)) +
  geom_bar() +
  theme_light() +
  labs(title="Diabetes")

ggplot(df, aes(x=HighBP, fill=Diabetes_binary, group=Diabetes_binary)) +
  geom_bar() +
  theme_light() +
  labs(title="Diabetes and HighBP", x="HighBP",
       fill="Diabetes")
```

```{r fig.height=7, fig.width=7, dpi=500}
# cor() function want nuimerical values, not factors. Hence, we pass original df here.
cor_mtx <- cor(df_orig)
corrplot(cor_mtx, type="upper", order = "hclust", tl.cex = 0.6)
```
It seems that BMI, DiffWalk, GenHealth, PhysHealth, HighCol, HighBP, Age, and HeartDiseaseAttack are positively correlated with Diabetes_binary.  DiffWalk, GenHealth, and PhysHealth are correlated with each other; hence we may not need all of them.

For negative correlations, PhysActivity, Education, and Income seem more significant than other variables.

```{r}
# ggplot(df, aes(x=BMI, fill=Diabetes_binary, group=Diabetes_binary)) +
#   geom_bar(position = "fill") +
#   theme_light() +
#   labs(title="Diabetes and HighBP", x="BMI",
#        fill="Diabetes")

diabetes_rate_df <- df %>% group_by(BMI) %>% 
                      summarise(diabetes_rate = mean(Diabetes_binary==1))
                      
ggplot(diabetes_rate_df, aes(x=BMI, y=diabetes_rate)) +
  geom_point() +
  theme_light() +
  labs(title="Diabetes rate per BMI group", x="BMI")
```

## Model using default prior
Using subset of data since it takes very long time to fit the model with full dataset.
Split dataset into 10 chunks
```{r}
# Set sample size
set.seed(RANDOM_STATE)
# df <- df[sample(1:nrow(df)), ] 
# s <- split(df, (seq(nrow(df))-1) %/% floor(nrow(df) * 0.1)) 
train_df <- df %>%
  sample_n(size=10000)
```


### HighBP
```{r}
cutoff <- 0.15
```

We do not pass prior information to use default prior.
```{r}
diabetes_model_def_HB <- stan_glm(Diabetes_binary ~ HighBP,
                               data = train_df,
                               family = binomial,
                               chains = 4, iter = 5000*2,
                               seed = RANDOM_STATE,
                               prior_PD = FALSE, refresh=FALSE)
# MCMC diagnosis
mcmc_trace(diabetes_model_def_HB, size=0.1)
mcmc_dens_overlay(diabetes_model_def_HB)
mcmc_acf(diabetes_model_def_HB, lags = 100)
```



```{r}
posterior_interval(diabetes_model_def_HB, prob = 0.80)
exp(posterior_interval(diabetes_model_def_HB, prob = 0.80))

prop <- function(x){mean(x == 1)}
pp_check(diabetes_model_def_HB, nreps = 100,
         plotfun = "stat", stat = "prop") + 
  xlab("probability of diabetes")
```
```{r}
# get_summary <- function(model, data, cutoff, start, end) {
#   res <- c()
#   for(i in start:end) {
#     res <- append(res, classification_summary(model, data[[i]], cutoff=cutoff))
#   }
#   return(res)
# }
summary_HB <- classification_summary(model = diabetes_model_def_HB, 
                                 data = train_df, cutoff = cutoff)
summary_HB
```


HighChol 
```{r}
diabetes_model_def_HC <- stan_glm(Diabetes_binary ~ HighChol,
                               data = train_df,
                               family = binomial,
                               chains = 4, iter = 5000*2,
                               seed = RANDOM_STATE,
                               prior_PD = FALSE, refresh=FALSE)

# MCMC diagnosis
mcmc_trace(diabetes_model_def_HC, size=0.1)
mcmc_dens_overlay(diabetes_model_def_HC)
mcmc_acf(diabetes_model_def_HC, lags = 100)
```

```{r}
posterior_interval(diabetes_model_def_HC, prob = 0.80)
exp(posterior_interval(diabetes_model_def_HC, prob = 0.80))


pp_check(diabetes_model_def_HC, nreps = 100,
         plotfun = "stat", stat = "prop") + 
  xlab("probability of diabetes")
```

```{r}
summary_HC <- classification_summary(model = diabetes_model_def_HC, 
                                 data = train_df, cutoff = cutoff)
summary_HC
```

PhysActivity
```{r}
diabetes_model_def_PA  <- stan_glm(Diabetes_binary ~ PhysActivity,
                               data = train_df,
                               family = binomial,
                               chains = 4, iter = 5000*2,
                               seed = RANDOM_STATE,
                               prior_PD = FALSE, refresh=FALSE)
# MCMC diagnosis
mcmc_trace(diabetes_model_def_PA, size=0.1)
mcmc_dens_overlay(diabetes_model_def_PA)
mcmc_acf(diabetes_model_def_PA, lags = 100)
```

```{r}
posterior_interval(diabetes_model_def_PA, prob = 0.80)
exp(posterior_interval(diabetes_model_def_PA, prob = 0.80))

pp_check(diabetes_model_def_PA, nreps = 100,
         plotfun = "stat", stat = "prop") + 
  xlab("probability of diabetes")
```
```{r}
summary_PA <- classification_summary(model = diabetes_model_def_PA, 
                                     data = train_df, cutoff = cutoff)
summary_PA
```

GenHlth
```{r}
diabetes_model_def_GH  <- stan_glm(Diabetes_binary ~ GenHlth,
                               data = train_df,
                               family = binomial,
                               chains = 4, iter = 5000*2,
                               seed = RANDOM_STATE,
                               prior_PD = FALSE, refresh=FALSE)
# MCMC diagnosis
mcmc_trace(diabetes_model_def_GH, size=0.1)
mcmc_dens_overlay(diabetes_model_def_GH)
mcmc_acf(diabetes_model_def_GH, lags = 100)
```

```{r}
posterior_interval(diabetes_model_def_GH, prob = 0.80)
exp(posterior_interval(diabetes_model_def_GH, prob = 0.80))

pp_check(diabetes_model_def_GH, nreps = 100,
         plotfun = "stat", stat = "prop") + 
  xlab("probability of diabetes")
```
```{r}
summary_GH <- classification_summary(model = diabetes_model_def_GH, 
                                     data = train_df, cutoff = cutoff)
summary_GH
```



